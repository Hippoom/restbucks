apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: "jacoco"
apply plugin: 'org.flywaydb.flyway'

version = getVersion()

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    provided
}


sourceSets {
    main {
        compileClasspath += configurations.provided
    }
    test {
        resources {
            srcDir 'src/test/data'
        }

        compileClasspath += configurations.provided
    }
}

processResources {
    filter { String line -> line.replace("{version}", getVersion()) }
}

processTestResources {
    filter { String line -> line.replace("{version}", getVersion()) }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

repositories {
    mavenCentral()
}

dependencies {
    provided 'org.projectlombok:lombok:1.14.8'

    compile "org.springframework.boot:spring-boot-starter-web"
    compile 'org.springframework.hateoas:spring-hateoas:0.16.0.RELEASE'
    compile 'org.springframework.plugin:spring-plugin-core:1.1.0.RELEASE'
    compile 'com.github.hippoom:rest-helper:0.1.0'

    compile 'com.google.guava:guava:18.0'
    compile 'org.modelmapper:modelmapper:0.7.5'
    compile "org.springframework:spring-orm:${springVersion}"
    compile "org.springframework:spring-context:${springVersion}"
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.data:spring-data-jpa:1.9.0.RELEASE'
    compile 'org.hibernate:hibernate-entitymanager:4.3.11.Final'
    compile 'org.apache.commons:commons-dbcp2:2.1.1'
    compile 'dom4j:dom4j:1.6.1'
    compile 'jaxen:jaxen:1.1.6'
    compile 'mysql:mysql-connector-java:5.1.36'

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile('junit:junit:4.12') {
        exclude group: 'org.hamcrest'
    }
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'com.jayway.restassured:rest-assured:2.4.0'
    testCompile 'com.jayway.jsonpath:json-path:0.9.1'
    testCompile 'com.jayway.awaitility:awaitility:1.6.4'
    testCompile 'org.assertj:assertj-core:3.1.0'
    testCompile 'com.h2database:h2:1.4.187'
    testCompile 'com.github.hippoom:spring-test-dbunit-template:0.1.1'
    testCompile('org.flywaydb.flyway-test-extensions:flyway-spring-test:3.2.1') {
        exclude group: 'org.slf4j' //introducing multiple slf4j impl
    }
}

buildscript {

    ext {
        springVersion = '4.2.1.RELEASE'
        springBootVersion = '1.2.5.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
        classpath 'org.flywaydb:flyway-gradle-plugin:3.2.1'
        classpath 'mysql:mysql-connector-java:5.1.36'
    }

}

test {
    exclude 'com/restbucks/**/smoke/*'
    exclude 'com/restbucks/**/feature/*'

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

test.finalizedBy jacocoTestReport

jar {
    version = null //version is saved in meta.json and versioned()
}

task versioned() {
    doLast {
        def file = file("${buildDir}/version")
        file.text = getVersion()
    }
}

build.finalizedBy versioned

task smokeTest(type: Test) {
    // this task will be executed in isolation since all artifacts have been built and deployed
    dependsOn = []

    include 'com/restbucks/**/smoke/*'

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    outputs.upToDateWhen { false }//force to always rerun

    reports {
        html {
            destination = "$buildDir/reports/smoke"
        }
    }
}

task featureTest(type: Test) {
    // this task will be executed in isolation since all artifacts have been built and deployed
    dependsOn = []

    include 'com/restbucks/**/feature/*'

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    outputs.upToDateWhen { false }//force to always rerun

    reports {
        html {
            destination = "$buildDir/reports/feature"
        }
    }
}

def getVersion() {
    return "0.1-" + getBuildNumber()
}

def getBuildNumber() {
    def revision = System.getenv('GO_REVISION')
    return revision == null ? "dev" : revision
}

def getEnv(String name, String defaultVal) {
    println("+++++++++++++++++++++++++++++++++++++")
    System.getenv(name) == null? defaultVal: System.getenv(name)
}

def getJdbcUrl() {
    def db = getEnv("DB_ENV_MYSQL_DATABASE", "restbucks_ordering")
    def ip = getEnv("DB_PORT_3306_TCP_ADDR", "localhost")
    def port = getEnv("DB_PORT_3306_TCP_PORT", "3306")

    def url = "jdbc:mysql://${ip}:${port}/${db}?useUnicode=true&characterEncoding=utf-8"
    return url
}

flyway {
    user = getEnv("DB_ENV_MYSQL_USER", "ordering")
    password = getEnv("DB_ENV_MYSQL_PASSWORD", "123456")
    url = getJdbcUrl()

}

