apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: "jacoco"

version = getVersion()

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    provided
}


sourceSets {
    main {
        compileClasspath += configurations.provided
    }
    test {
        resources {
            srcDir 'src/test/features'
            srcDir 'src/test/data'
            srcDir 'src/test/sql'
        }

        compileClasspath += configurations.provided
    }
}

processResources {
    filter { String line -> line.replace("{version}", getVersion()) }
}

processTestResources {
    filter { String line -> line.replace("{version}", getVersion()) }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

repositories {
    mavenCentral()
}

dependencies {
    provided 'org.projectlombok:lombok:1.14.8'

    compile "org.springframework.boot:spring-boot-starter-web"
    compile 'org.springframework.hateoas:spring-hateoas:0.16.0.RELEASE'
    compile 'org.springframework.plugin:spring-plugin-core:1.1.0.RELEASE'
    compile 'com.google.guava:guava:18.0'

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile('junit:junit:4.12') {
        exclude group: 'org.hamcrest'
    }
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'com.jayway.restassured:rest-assured:2.4.0'
    testCompile 'com.jayway.jsonpath:json-path:0.9.1'
    testCompile 'com.jayway.awaitility:awaitility:1.6.4'
    testCompile 'org.assertj:assertj-core:3.1.0'
}

buildscript {

    ext {
        springBootVersion = '1.2.5.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
    }

}

test {
    exclude 'com/restbucks/**/smoke/*'

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

test.finalizedBy jacocoTestReport

task runSmokeTest(type: Test) {
    // this task will be executed in isolation since all artifacts have been built and deployed
    dependsOn = []

    include 'com/restbucks/**/smoke/*'

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    outputs.upToDateWhen { false }//force to always rerun

    reports {
        html {
            destination = "$buildDir/reports/smoke"
        }
    }
}

def getVersion() {
    return "0.1-" + getBuildNumber()
}

def getBuildNumber() {
    def revision = System.getenv('GO_REVISION')
    return revision == null ? "dev" : revision
}




